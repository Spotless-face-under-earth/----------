#include<iostream>
#include<sstream>
#include<string>
using namespace std;
//S盒的定义
static int S[16][16] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};
//逆S盒的定义
static int rS[16][16] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};
//轮密钥获取的轮常数
static int rCON[10] = {
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36
};
//有限域上的乘法
int gfMultiply(int x, int y) {
    int result = 0;
    while (y > 0) {
        if (y & 1) result ^= x;  // 如果最低位是1，则异或
        x <<= 1;                 // x 左移，相当于乘 x
        if (x & 0x100)           // 如果最高位溢出，则减去模多项式
            x ^= 0x11B;          // 使用不可约多项式模
        y >>= 1;
    }
    return result;
}
//欧几里得算法求逆元
int ReverseEuclid(int a, int m) {
	if(a==0)return 0;
	else 
	{
    int t0 = 0, t1 = 1; // 用于计算逆元的中间变量
    int r0 = m, r1 = a; // 初始化 r0 = m，r1 = a

    while (r1 != 0) {
        int q = r0 / r1;      // 商
        int r = r0 % r1;      // 余数
        r0 = r1;              // 更新 r0 和 r1
        r1 = r;

        int t = t0 ^ gfMultiply(q, t1); // 异或运算代替减法
        t0 = t1;                        // 更新 t0 和 t1
        t1 = t;
    }

    while (t0 < 0) t0 += m;  // 确保逆元为正数
    return t0;
	}
}

//AES算法的乘法
int aesMult(int a, int b)
{
	int thr = b & 0x8;
	int sec = b & 0x4;
	int fir = b & 0x2;
	int firstMod = b % 2;
	int res = 0;

	if (thr)
	{
		int temp = a;
		for (int i = 1; i <= 3; ++i)
		{
			temp = temp << 1;
			if (temp >= 256)
			{
				temp = temp ^ 0x11b;
			}
		}
		temp = temp % 256;
		res = res ^ temp;
	}
	if (sec)
	{
		int temp = a;
		for (int i = 1; i <= 2; ++i)
		{
			temp = temp << 1;
			if (temp >= 256)
			{
				temp = temp ^ 0x11b;
			}
		}
		temp = temp % 256;
		res = res ^ temp;
	}
	if (fir)
	{
		int temp = a;
		temp = temp << 1;
		if (temp >= 256)
		{
			temp = temp ^ 0x11b;
		}
		temp = temp % 256;
		res = res ^ temp;
	}
	if (firstMod)
	{
		res = res ^ a;
	}
	return res;
}
//密钥扩展
void keyExpansion(int key[4][4], int w[11][4][4])
{
	for (int i = 0; i < 4; ++i)
	{
		for (int j = 0; j < 4; j++)
		{
			w[0][i][j] = key[j][i];

		}
	}
	for (int i = 1; i < 11; ++i)
	{
		for (int j = 0; j < 4; ++j)
		{
			int temp[4];
			if (j == 0)
			{
				temp[0] = w[i - 1][3][1];
				temp[1] = w[i - 1][3][2];
				temp[2] = w[i - 1][3][3];
				temp[3] = w[i - 1][3][0];
				for (int k = 0; k < 4; ++k)
				{
					int m = temp[k];
					int row = m / 16;
					int col = m % 16;
					temp[k] = S[row][col];
					if (k == 0)
					{
						temp[k] = temp[k] ^ rCON[i - 1];
					}
				}
			}
			else
			{
				temp[0] = w[i][j - 1][0];
				temp[1] = w[i][j - 1][1];
				temp[2] = w[i][j - 1][2];
				temp[3] = w[i][j - 1][3];
			}
			for (int x = 0; x < 4; x++)
			{
				w[i][j][x] = w[i - 1][j][x] ^ temp[x];
			}
		}
	}
}
//通过S盒进行字节替换
void byteSubbySTable(int in[4][4], int type)
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			int temp = in[i][j];
			int row = temp / 16;
			int col = temp % 16;
			if (type == 1)
			{
				in[i][j] = S[row][col];
			}
			if (type == 0)
			{
				in[i][j] = rS[row][col];
			}
		}
	}
}
//通过仿射变换进行字节替换
int affineTransform(int x) {
    int result = 0;
    for (int i = 0; i < 8; ++i) {
        // 根据每一位按公式进行位操作
        int bit = ( (x >> i) & 1 ) ^ 
                  ( (x >> ((i + 4) % 8)) & 1 ) ^ 
                  ( (x >> ((i + 5) % 8)) & 1 ) ^ 
                  ( (x >> ((i + 6) % 8)) & 1 ) ^ 
                  ( (x >> ((i + 7) % 8)) & 1 ) ^ 
                  ((0x63 >> i) & 1);
        result |= (bit << i);
    }
    return result;
}
//通过仿射变换生成S盒,但是有问题！！！应该是扩展欧几里得求逆元部分有问题。
void generateSBox() {
	for (int i = 0; i < 256; ++i) {
		int inverse = ReverseEuclid(i, 0x11b);
		S[i / 16][i % 16] = affineTransform(inverse);
		// cout<<hex<<S[i / 16][i % 16]<<" ";
		// if((i+1)%16==0)cout<<endl;
	}
}
//通过S盒生成逆S盒
void generateInverseSBox() {
	for (int i = 0; i < 256; ++i) {
		int sValue = S[i / 16][i % 16];
		rS[sValue / 16][sValue % 16] = i;
	}
}
//计算行移位
void shiftRow(int in[4][4], int type) {
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < i; j++)
		{
			if (type == 1)
			{
				int temp = in[i][0];
				in[i][0] = in[i][1];
				in[i][1] = in[i][2];
				in[i][2] = in[i][3];
				in[i][3] = temp;
			}
			else
			{
				int temp = in[i][3];
				in[i][3] = in[i][2];
				in[i][2] = in[i][1];
				in[i][1] = in[i][0];
				in[i][0] = temp;
			}
		}
	}
}
//计算列混合
void mixCol(int in[4][4], int type)
{
	for (int i = 0; i < 4; i++)
	{
		int t0 = in[0][i];
		int t1 = in[1][i];
		int t2 = in[2][i];

		int t3 = in[3][i];
		if (type == 1)
		{
			in[0][i] = aesMult(t0, 2) ^ aesMult(t1, 3) ^ t2 ^ t3;
			in[1][i] = t0 ^ aesMult(t1, 2) ^ aesMult(t2, 3) ^ t3;
			in[2][i] = t0 ^ t1 ^ aesMult(t2, 2) ^ aesMult(t3, 3);
			in[3][i] = aesMult(t0, 3) ^ t1 ^ t2 ^ aesMult(t3, 2);
		}
		else
		{
			in[0][i] = aesMult(t0, 14) ^ aesMult(t1, 11) ^ aesMult(t2, 13) ^ aesMult(t3, 9);
			in[1][i] = aesMult(t0, 9) ^ aesMult(t1, 14) ^ aesMult(t2, 11) ^ aesMult(t3, 13);
			in[2][i] = aesMult(t0, 13) ^ aesMult(t1, 9) ^ aesMult(t2, 14) ^ aesMult(t3, 11);
			in[3][i] = aesMult(t0, 11) ^ aesMult(t1, 13) ^ aesMult(t2, 9) ^ aesMult(t3, 14);
		}
	}
}
//轮密钥加
void addRoundKey(int in[4][4], int key[4][4])
{
	for (int i = 0; i < 4; ++i)
	{
		for (int j = 0; j < 4; j++)
		{
			in[i][j] = in[i][j] ^ key[j][i];
		}
	}
}

//实现AES加密
void encodeAES(int in[4][4], int key[4][4])
{
	int type = 1;
	int subKey[11][4][4];
	keyExpansion(key, subKey);
	addRoundKey(in, subKey[0]);
	for (int i = 1; i <= 10; ++i)
	{
		byteSubbySTable(in, type);
		shiftRow(in, type);
		if (i != 10)
		{
			mixCol(in, type);
		}
		addRoundKey(in, subKey[i]);
	}
}
//实现AES解密
void decodeAES(int in[4][4], int key[4][4])
{
	int type = 0;
	int subKey[11][4][4];
	keyExpansion(key, subKey);
	addRoundKey(in, subKey[10]);
	for (int i = 9; i >= 0; --i)
	{
		shiftRow(in, type);
		byteSubbySTable(in, type);
		addRoundKey(in, subKey[i]);
		if (i != 0)
		{
			mixCol(in, type);
		}

	}
}

int main()
{
    uint8_t bytetxt[4][4];
    uint8_t bytekey[4][4];
    int txt[4][4];
    int key[4][4];
    
    string txtinput;
    string keyinput;
    
    
    cin >> keyinput;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            stringstream ss;
            ss << hex << keyinput.substr((i * 4 + j) * 2, 2);  // 取两个字符
            int value;
            ss >> value;
            bytekey[j][i] = static_cast<uint8_t>(value);
            key[j][i] = bytekey[j][i];
        }
    }

	//     // 输出数组内容，验证读取是否正确
    // for (int i = 0; i < 4; i++) {
    //     for (int j = 0; j < 4; j++) {
    //         cout << hex << key[j][i] << " ";
    //     }
    //     cout << endl;
    // }

	cin >> txtinput;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            stringstream ss;
            ss << hex << txtinput.substr((i * 4 + j) * 2, 2);  // 取两个字符
            int value;
            ss >> value;
            bytetxt[j][i] = static_cast<uint8_t>(value);
            txt[j][i] = bytetxt[j][i];
        }
    }

    // // 输出数组内容，验证读取是否正确
    // for (int i = 0; i < 4; i++) {
    //     for (int j = 0; j < 4; j++) {
    //         cout << hex << txt[j][i] << " ";
    //     }
    //     cout << endl;
    // }

	// //cout<<ReverseEuclid(0x2,0x11b)<<endl;
	//cout << hex << gfMultiply(0x5, 0x11b) << endl;
	//generateSBox();

    encodeAES(txt, key);
    
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {            
            if (txt[j][i] < 16)
                cout << "0";
            cout << (hex) << uppercase<<txt[j][i];
        }

    }
	return 0;
	
}